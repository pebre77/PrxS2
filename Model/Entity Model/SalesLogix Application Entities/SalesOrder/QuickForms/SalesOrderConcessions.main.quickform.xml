<?xml version="1.0" encoding="utf-8"?>
<QuickFormDefinition Id="f20e7953-0fa4-4a5f-875c-9a57370149fb" name="SalesOrderConcessions">
  <Properties>
    <Property name="EntityTypeName" type="System.String">ISalesOrder</Property>
    <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
    <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
    <Property name="UseEntityNameAsTitle" type="System.Boolean">True</Property>
    <Property name="ImagePath" type="System.String"></Property>
    <Property name="DefinitionType" type="System.String">Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms</Property>
    <Property name="Columns" type="System.ComponentModel.BindingList`1[[System.Windows.Forms.ColumnStyle, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"><ArrayOfColumnStyle xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><ColumnStyle><SizeType>Percent</SizeType><Width>25</Width></ColumnStyle><ColumnStyle><SizeType>Percent</SizeType><Width>10</Width></ColumnStyle><ColumnStyle><SizeType>Percent</SizeType><Width>20</Width></ColumnStyle><ColumnStyle><SizeType>Percent</SizeType><Width>20</Width></ColumnStyle><ColumnStyle><SizeType>Percent</SizeType><Width>25</Width></ColumnStyle></ArrayOfColumnStyle></Property>
    <Property name="Rows" type="System.ComponentModel.BindingList`1[[System.Windows.Forms.RowStyle, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"><ArrayOfRowStyle xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle><RowStyle><SizeType>Absolute</SizeType><Height>35</Height></RowStyle></ArrayOfRowStyle></Property>
    <Property name="GeneratePrintView" type="System.Boolean">False</Property>
    <Property name="Description" type="System.String"></Property>
    <Property name="ActiveControl" type="System.String"></Property>
  </Properties>
  <LoadActions>
    <ActionDefinition>
      <ResourceKey>5a11c86a-4c4a-4de0-a5a5-9ab5a022ffa0</ResourceKey>
      <RootActionName>CSharpSnippetAction</RootActionName>
      <Action>
        <CSharpCodeSnippet><![CDATA[try {
NHibernate.ISession session = new Sage.Platform.Orm.SessionScopeWrapper(); 
Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10


decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//*****



// Total Quoted SGL
if (string.IsNullOrEmpty(curQRateSgl.Text) | string.IsNullOrEmpty(txtTotQRSgl.Text)){
		txtTotQSgl.Text = "0";
}
else {
	
	decimal vTotQSgl =  decimal.Parse(txtTotQRSgl.Text) * decimal.Parse(curQRateSgl.Text);
	txtTotQSgl.Text = vTotQSgl.ToString();	
}


// Total Quoted DBL
if (string.IsNullOrEmpty(curQRateDbl.Text) | string.IsNullOrEmpty(txtTotQRDbl.Text)){
		txtTotQDbl.Text = "0";
}
else {
	decimal vTotQDbl = decimal.Parse(curQRateDbl.Text) * decimal.Parse(txtTotQRDbl.Text);
	txtTotQDbl.Text = vTotQDbl.ToString();	
}

//INIT Contracted SGL/DBL
 
 string sql = "Select top 1 RoomRate From soRoomblockType Where roomtype = 'Single' and SalesOrderId = '"+saleso.Id.ToString()+"'";
 decimal roomratesgl = session.CreateSQLQuery(sql).UniqueResult<decimal>();
 if (!string.IsNullOrEmpty(roomratesgl.ToString())){
	curCRateSgl.Text = roomratesgl.ToString();
	saleso.Concessions.CRateSGL = double.Parse(roomratesgl.ToString());
 }

 sql = "Select top 1 TOTALNBRROOMS From soRoomblockType Where roomtype = 'Single' and SalesOrderId = '"+saleso.Id.ToString()+"'";
 int totalroomssgl = session.CreateSQLQuery(sql).UniqueResult<int>();
 if (!string.IsNullOrEmpty(totalroomssgl.ToString())){
	txtTotCRSgl.Text = totalroomssgl.ToString();
	saleso.Concessions.RoomsSGL = totalroomssgl;
 }

 sql = "Select top 1 RoomRate From soRoomblockType Where roomtype = 'Double' and SalesOrderId = '"+saleso.Id.ToString()+"'";
 decimal roomratedbl = session.CreateSQLQuery(sql).UniqueResult<decimal>();
 if (!string.IsNullOrEmpty(roomratedbl.ToString())){
	curCRateDbl.Text = roomratedbl.ToString();
	saleso.Concessions.CRateDbl = double.Parse(roomratedbl.ToString());
 }

 sql = "Select top 1 TOTALNBRROOMS From soRoomblockType Where roomtype = 'Double' and SalesOrderId = '"+saleso.Id.ToString()+"'";
 int totalroomsdbl = session.CreateSQLQuery(sql).UniqueResult<int>();
 if (!string.IsNullOrEmpty(totalroomsdbl.ToString())){
	txtTotCRDbl.Text = totalroomsdbl.ToString();
	saleso.Concessions.RoomsDBL = totalroomsdbl;
 }


// Total Contracted SGL
if (string.IsNullOrEmpty(curCRateSgl.Text) | string.IsNullOrEmpty(txtTotCRSgl.Text)){
		txtTotCSgl.Text = "0";
}
else {
	
	decimal vTotCSgl = decimal.Parse(curCRateSgl.Text) * decimal.Parse(txtTotCRSgl.Text);
	txtTotCSgl.Text = vTotCSgl.ToString();	
}

// Total Contracted DBL
if (string.IsNullOrEmpty(curCRateDbl.Text) | string.IsNullOrEmpty(txtTotCRDbl.Text)){
		txtTotCDbl.Text = "0";
}
else {

	decimal vTotCDbl = decimal.Parse(curCRateDbl.Text) * decimal.Parse(txtTotCRDbl.Text);
	txtTotCDbl.Text = vTotCDbl.ToString();	
}

//Total Order Value
sql = "Select Sum(ROOMRATE*TOTALNBRROOMS) From soRoomblockType Where SalesOrderId = '"+saleso.Id.ToString()+"'";
 decimal totalordervalue = session.CreateSQLQuery(sql).UniqueResult<decimal>();
 if (!string.IsNullOrEmpty(totalordervalue.ToString())){
	txtTotOrderValue.Text = totalordervalue.ToString();
 } else {
	txtTotOrderValue.Text = "0";
}

//Rate Savings
	decimal vRateSavings= (decimal.Parse(txtTotQSgl.Text) +  decimal.Parse(txtTotQDbl.Text)) -  (decimal.Parse(txtTotCSgl.Text) +  decimal.Parse(txtTotCDbl.Text));
	txtRateSavings.Text = vRateSavings.ToString();
	saleso.Concessions.RateSavings = double.Parse(vRateSavings.ToString());
	saleso.Concessions.RSaving2 = double.Parse(vRateSavings.ToString());
	this.txtRateSavings2.Text = vRateSavings.ToString();

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}


//Attrition

	if (pklAttrition.PickListValue == "F"){
		txtAttPercent.Enabled = true;
		txtCostAvoidance.Enabled = true;
		
	} else
	{
		
		txtAttPercent.Enabled = false;
		txtCostAvoidance.Enabled = false;
	}
//Cost Avoidance
	
	
	int vCostAvoidance = 0;
	if (!string.IsNullOrEmpty(txtAttPercent.Text)){
		vCostAvoidance = 100 - int.Parse(txtAttPercent.Text);
	}
	saleso.Concessions.CostAvoid = vCostAvoidance;
	txtCostAvoidance.Text = vCostAvoidance.ToString();

//Rooms Saved
sql = "Select Sum(TOTALNBRROOMS) From soRoomblockType Where SalesOrderId = '"+saleso.Id.ToString()+"'";
 int roomssaved = session.CreateSQLQuery(sql).UniqueResult<int>();
 if (!string.IsNullOrEmpty(roomssaved.ToString())){
	txtRoomsSaved.Text = roomssaved.ToString();
 } else {
	txtRoomsSaved.Text = "0";
}	

//Avg. Rate
  txtAvgRate.Text = saleso.SORoomBlock.AverageRoomRate.ToString();

//Attrition Savings
  txtAttSavings.Text = saleso.SORoomBlock.AverageRoomRate.ToString();
	
//Commit
saleso.Save();

} //End Try
catch
    {
          
    }]]></CSharpCodeSnippet>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
    </ActionDefinition>
  </LoadActions>
  <QuickFormElements>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>0</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFLabel</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>center</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>true</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con1</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>1</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con1</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con1</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con1</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con1.PickListValue)){
	
	switch (Con1.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi1.Text = vmult.ToString();
			saleso.Concessions.Multi1 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
				
			}
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price1.Text = "55";
			saleso.Concessions.Price1 = 55;
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}	
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}		
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price1.Text = "13";
			saleso.Concessions.Price1 = 13;
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price1.Text = "25";
			saleso.Concessions.Price1 = 25;
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price1.Text = "30";
			saleso.Concessions.Price1 = 30;
			Multi1.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi1 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price1.Text = "140";
			saleso.Concessions.Price1 = 140;
			Multi1.Text = "1";
			saleso.Concessions.Multi1 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}
			Multi1.Text = "1";
			saleso.Concessions.Multi1 = 1;
			break;
		case "AMENITIES":
			Price1.Text = "30";
			saleso.Concessions.Price1 = 30;
			Multi1.Text = "1";
			saleso.Concessions.Multi1 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}
			Multi1.Text = vcalc35.ToString();
			saleso.Concessions.Multi1 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi1.Text = vcalc40.ToString();
			saleso.Concessions.Multi1 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}				
			Multi1.Text = vcalc45.ToString();
			saleso.Concessions.Multi1 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price1.Text = vcalc.ToString();
				saleso.Concessions.Price1 = vcalc;
			} else {
				Price1.Text = "0";
				saleso.Concessions.Price1 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}
			Multi1.Text = vcalc50.ToString();
			saleso.Concessions.Multi1 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con2</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>2</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con2</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con2</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con2</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con2.PickListValue)){
	
	switch (Con2.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi2.Text = vmult.ToString();
			saleso.Concessions.Multi2 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
				
			}
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price2.Text = "55";
			saleso.Concessions.Price2 = 55;
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}	
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}		
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price2.Text = "13";
			saleso.Concessions.Price2 = 13;
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price2.Text = "25";
			saleso.Concessions.Price2 = 25;
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price2.Text = "30";
			saleso.Concessions.Price2 = 30;
			Multi2.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi2 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price2.Text = "140";
			saleso.Concessions.Price2 = 140;
			Multi2.Text = "1";
			saleso.Concessions.Multi2 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}
			Multi2.Text = "1";
			saleso.Concessions.Multi2 = 1;
			break;
		case "AMENITIES":
			Price2.Text = "30";
			saleso.Concessions.Price2 = 30;
			Multi2.Text = "1";
			saleso.Concessions.Multi2 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}
			
			Multi2.Text = vcalc35.ToString();
			saleso.Concessions.Multi2 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;

			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi2.Text = vcalc40.ToString();
			saleso.Concessions.Multi2 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi2.Text = vcalc45.ToString();
			saleso.Concessions.Multi2 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price2.Text = vcalc.ToString();
				saleso.Concessions.Price2 = vcalc;
			} else {
				Price2.Text = "0";
				saleso.Concessions.Price2 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi2.Text = vcalc50.ToString();
			saleso.Concessions.Multi2 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con3</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>3</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con3</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con3</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con3</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con3.PickListValue)){
	
	switch (Con3.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi3.Text = vmult.ToString();
			saleso.Concessions.Multi3 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
				
			}
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price3.Text = "55";
			saleso.Concessions.Price3 = 55;
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}	
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}		
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price3.Text = "13";
			saleso.Concessions.Price3 = 13;
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price3.Text = "25";
			saleso.Concessions.Price3 = 25;
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price3.Text = "30";
			saleso.Concessions.Price3 = 30;
			Multi3.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi3 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price3.Text = "140";
			saleso.Concessions.Price3 = 140;
			Multi3.Text = "1";
			saleso.Concessions.Multi3 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}
			Multi3.Text = "1";
			saleso.Concessions.Multi3 = 1;
			break;
		case "AMENITIES":
			Price3.Text = "30";
			saleso.Concessions.Price3 = 30;
			Multi3.Text = "1";
			saleso.Concessions.Multi3 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi3.Text = vcalc35.ToString();
			saleso.Concessions.Multi3 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi3.Text = vcalc40.ToString();
			saleso.Concessions.Multi3 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi3.Text = vcalc45.ToString();
			saleso.Concessions.Multi3 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price3.Text = vcalc.ToString();
				saleso.Concessions.Price3 = vcalc;
			} else {
				Price3.Text = "0";
				saleso.Concessions.Price3 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi3.Text = vcalc50.ToString();
			saleso.Concessions.Multi3 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con4</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>4</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con4</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con4</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con4</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con4.PickListValue)){
	
	switch (Con4.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi4.Text = vmult.ToString();
			saleso.Concessions.Multi4 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
				
			}
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price4.Text = "55";
			saleso.Concessions.Price4 = 55;
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}	
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}		
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price4.Text = "13";
			saleso.Concessions.Price4 = 13;
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price4.Text = "25";
			saleso.Concessions.Price4 = 25;
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price4.Text = "30";
			saleso.Concessions.Price4 = 30;
			Multi4.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi4 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price4.Text = "140";
			saleso.Concessions.Price4 = 140;
			Multi4.Text = "1";
			saleso.Concessions.Multi4 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}
			Multi4.Text = "1";
			saleso.Concessions.Multi4 = 1;
			break;
		case "AMENITIES":
			Price4.Text = "30";
			saleso.Concessions.Price4 = 30;
			Multi4.Text = "1";
			saleso.Concessions.Multi4 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi4.Text = vcalc35.ToString();
			saleso.Concessions.Multi4 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi4.Text = vcalc40.ToString();
			saleso.Concessions.Multi4 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi4.Text = vcalc45.ToString();
			saleso.Concessions.Multi4 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price4.Text = vcalc.ToString();
				saleso.Concessions.Price4 = vcalc;
			} else {
				Price4.Text = "0";
				saleso.Concessions.Price4 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi4.Text = vcalc50.ToString();
			saleso.Concessions.Multi4 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con5</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>5</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con5</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con5</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con5</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con5.PickListValue)){
	
	switch (Con5.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi5.Text = vmult.ToString();
			saleso.Concessions.Multi5 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
				
			}
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price5.Text = "55";
			saleso.Concessions.Price5 = 55;
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}	
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}		
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price5.Text = "13";
			saleso.Concessions.Price5 = 13;
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price5.Text = "25";
			saleso.Concessions.Price5 = 25;
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price5.Text = "30";
			saleso.Concessions.Price5 = 30;
			Multi5.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi5 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price5.Text = "140";
			saleso.Concessions.Price5 = 140;
			Multi5.Text = "1";
			saleso.Concessions.Multi5 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}
			Multi5.Text = "1";
			saleso.Concessions.Multi5 = 1;
			break;
		case "AMENITIES":
			Price5.Text = "30";
			saleso.Concessions.Price5 = 30;
			Multi5.Text = "1";
			saleso.Concessions.Multi5 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi5.Text = vcalc35.ToString();
			saleso.Concessions.Multi5 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi5.Text = vcalc40.ToString();
			saleso.Concessions.Multi5 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi5.Text = vcalc45.ToString();
			saleso.Concessions.Multi5 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price5.Text = vcalc.ToString();
				saleso.Concessions.Price5 = vcalc;
			} else {
				Price5.Text = "0";
				saleso.Concessions.Price5 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi5.Text = vcalc50.ToString();
			saleso.Concessions.Multi5 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con6</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>6</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con6</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con6</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con6</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con6.PickListValue)){
	
	switch (Con6.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi6.Text = vmult.ToString();
			saleso.Concessions.Multi6 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
				
			}
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price6.Text = "55";
			saleso.Concessions.Price6 = 55;
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}	
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}		
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price6.Text = "13";
			saleso.Concessions.Price6 = 13;
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price6.Text = "25";
			saleso.Concessions.Price6 = 25;
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price6.Text = "30";
			saleso.Concessions.Price6 = 30;
			Multi6.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi6 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price6.Text = "140";
			saleso.Concessions.Price6 = 140;
			Multi6.Text = "1";
			saleso.Concessions.Multi6 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}
			Multi6.Text = "1";
			saleso.Concessions.Multi6 = 1;
			break;
		case "AMENITIES":
			Price6.Text = "30";
			saleso.Concessions.Price6 = 30;
			Multi6.Text = "1";
			saleso.Concessions.Multi6 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi6.Text = vcalc35.ToString();
			saleso.Concessions.Multi6 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}				
			Multi6.Text = vcalc40.ToString();
			saleso.Concessions.Multi6 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi6.Text = vcalc45.ToString();
			saleso.Concessions.Multi6 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price6.Text = vcalc.ToString();
				saleso.Concessions.Price6 = vcalc;
			} else {
				Price6.Text = "0";
				saleso.Concessions.Price6 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi6.Text = vcalc50.ToString();
			saleso.Concessions.Multi6 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con7</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>7</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con7</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con7</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con7</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con7.PickListValue)){
	
	switch (Con7.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi7.Text = vmult.ToString();
			saleso.Concessions.Multi7 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
				
			}
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price7.Text = "55";
			saleso.Concessions.Price7 = 55;
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}	
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}		
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price7.Text = "13";
			saleso.Concessions.Price7 = 13;
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price7.Text = "25";
			saleso.Concessions.Price7 = 25;
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price7.Text = "30";
			saleso.Concessions.Price7 = 30;
			Multi7.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi7 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price7.Text = "140";
			saleso.Concessions.Price7 = 140;
			Multi7.Text = "1";
			saleso.Concessions.Multi7 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}
			Multi7.Text = "1";
			saleso.Concessions.Multi7 = 1;
			break;
		case "AMENITIES":
			Price7.Text = "30";
			saleso.Concessions.Price7 = 30;
			Multi7.Text = "1";
			saleso.Concessions.Multi7 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi7.Text = vcalc35.ToString();
			saleso.Concessions.Multi7 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;

			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi7.Text = vcalc40.ToString();
			saleso.Concessions.Multi7 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi7.Text = vcalc45.ToString();
			saleso.Concessions.Multi7 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price7.Text = vcalc.ToString();
				saleso.Concessions.Price7 = vcalc;
			} else {
				Price7.Text = "0";
				saleso.Concessions.Price7 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi7.Text = vcalc50.ToString();
			saleso.Concessions.Multi7 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con8</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>8</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con8</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con8</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con8</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con8.PickListValue)){
	
	switch (Con8.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi8.Text = vmult.ToString();
			saleso.Concessions.Multi8 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
				
			}
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price8.Text = "55";
			saleso.Concessions.Price8 = 55;
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}	
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}		
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price8.Text = "13";
			saleso.Concessions.Price8 = 13;
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price8.Text = "25";
			saleso.Concessions.Price8 = 25;
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price8.Text = "30";
			saleso.Concessions.Price8 = 30;
			Multi8.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi8 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price8.Text = "140";
			saleso.Concessions.Price8 = 140;
			Multi8.Text = "1";
			saleso.Concessions.Multi8 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}
			Multi8.Text = "1";
			saleso.Concessions.Multi8 = 1;
			break;
		case "AMENITIES":
			Price8.Text = "30";
			saleso.Concessions.Price8 = 30;
			Multi8.Text = "1";
			saleso.Concessions.Multi8 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi8.Text = vcalc35.ToString();
			saleso.Concessions.Multi8 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi8.Text = vcalc40.ToString();
			saleso.Concessions.Multi8 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi8.Text = vcalc45.ToString();
			saleso.Concessions.Multi8 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price8.Text = vcalc.ToString();
				saleso.Concessions.Price8 = vcalc;
			} else {
				Price8.Text = "0";
				saleso.Concessions.Price8 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi8.Text = vcalc50.ToString();
			saleso.Concessions.Multi8 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con9</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>9</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con9</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con9</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con9</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con9.PickListValue)){
	
	switch (Con9.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi9.Text = vmult.ToString();
			saleso.Concessions.Multi9 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
				
			}
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price9.Text = "55";
			saleso.Concessions.Price9 = 55;
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}	
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}		
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price9.Text = "13";
			saleso.Concessions.Price9 = 13;
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price9.Text = "25";
			saleso.Concessions.Price9 = 25;
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price9.Text = "30";
			saleso.Concessions.Price9 = 30;
			Multi9.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi9 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price9.Text = "140";
			saleso.Concessions.Price9 = 140;
			Multi9.Text = "1";
			saleso.Concessions.Multi9 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}
			Multi9.Text = "1";
			saleso.Concessions.Multi9 = 1;
			break;
		case "AMENITIES":
			Price9.Text = "30";
			saleso.Concessions.Price9 = 30;
			Multi9.Text = "1";
			saleso.Concessions.Multi9 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi9.Text = vcalc35.ToString();
			saleso.Concessions.Multi9 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi9.Text = vcalc40.ToString();
			saleso.Concessions.Multi9 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi9.Text = vcalc45.ToString();
			saleso.Concessions.Multi9 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price9.Text = vcalc.ToString();
				saleso.Concessions.Price9 = vcalc;
			} else {
				Price9.Text = "0";
				saleso.Concessions.Price9 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi9.Text = vcalc50.ToString();
			saleso.Concessions.Multi9 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Con10</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>0</Column><Row>10</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Con10</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Con10</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Con10</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

DateTime vDeptDate = saleso.Opportunity.OpportunityCIUDF.Main_departure_Date.Value;
DateTime vArrDate = saleso.Opportunity.OpportunityCIUDF.Main_arrival_Date.Value;

int vDaysInEvent = 0;
if ((!string.IsNullOrEmpty(vDeptDate.ToString())) & (!string.IsNullOrEmpty(vArrDate.ToString()))){
	
	 vDaysInEvent = vDeptDate.Subtract(vArrDate).Days;
}

decimal vSingleRate = decimal.Parse(curCRateSgl.Text);
int vTotalRooms = int.Parse(txtTotCRSgl.Text);
decimal vcalc = 0;
if (!string.IsNullOrEmpty(Con10.PickListValue)){
	
	switch (Con10.PickListValue.Trim().ToUpper()){
		case "STAFF ROOMS":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}
			
			decimal vmult = vDaysInEvent + 2;
			Multi10.Text = vmult.ToString();
			saleso.Concessions.Multi10 = double.Parse(vmult.ToString());
			
			break;
		case "COMP SUITE":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate*decimal.Parse("2.5");
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
				
			}
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());
			break;
		case "UPGRADES":
			Price10.Text = "55";
			saleso.Concessions.Price10 = 55;
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());
			break;
		case "GOVERNMENT":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/4;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}	
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "COMP STAFF":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}		
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());
			break;
		case "INTERNET":
			Price10.Text = "13";
			saleso.Concessions.Price10 = 13;
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());			
			break;
		case "RESORT FEE":
			Price10.Text = "25";
			saleso.Concessions.Price10 = 25;
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());
			break;
		case "PARKING":
			Price10.Text = "30";
			saleso.Concessions.Price10 = 30;
			Multi10.Text = vDaysInEvent.ToString();
			saleso.Concessions.Multi10 = double.Parse(vDaysInEvent.ToString());
			break;
		case "LIMOS":
			Price10.Text = "140";
			saleso.Concessions.Price10 = 140;
			Multi10.Text = "1";
			saleso.Concessions.Multi10 = 1;
			break;
		case "PREPLAN":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate/2;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}
			Multi10.Text = "1";
			saleso.Concessions.Multi10 = 1;
			break;
		case "AMENITIES":
			Price10.Text = "30";
			saleso.Concessions.Price10 = 30;
			Multi10.Text = "1";
			saleso.Concessions.Multi10 = 1;
			break;
		case "1 PER 35":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}	
			
			double vcalc35 = (double)vTotalRooms/35;
			if (vcalc35 < 0.75){
				vcalc35 = 0;	
			} else if ((vcalc35 >= 0.75)&(vcalc35<=1)){
				vcalc35 = 1;
			}else	{
				vcalc35 = Math.Ceiling(Math.Round(vcalc35+0.50));
			}			
			Multi10.Text = vcalc35.ToString();
			saleso.Concessions.Multi10 = vcalc35;
			break;			
		case "1 PER 40":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}
				
			double vcalc40 = (double)vTotalRooms/40;
			if (vcalc40 < 0.75){
				vcalc40 = 0;	
			} else if ((vcalc40 >= 0.75)&(vcalc40<=1)){
				vcalc40 = 1;
			}else	{
				vcalc40 = Math.Ceiling(Math.Round(vcalc40+0.50));
			}			
			Multi10.Text = vcalc40.ToString();
			saleso.Concessions.Multi10 = vcalc40;
			break;			
		case "1 PER 45":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}	
			double vcalc45 = (double)vTotalRooms/45;
			if (vcalc45 < 0.75){
				vcalc45 = 0;	
			} else if ((vcalc45 >= 0.75)&(vcalc45<=1)){
				vcalc45 = 1;
			}else	{
				vcalc45 = Math.Ceiling(Math.Round(vcalc45+0.50));
			}			
			Multi10.Text = vcalc45.ToString();
			saleso.Concessions.Multi10 = vcalc45;
			break;			
		case "1 PER 50":
			if (!string.IsNullOrEmpty(vSingleRate.ToString())){
				vcalc = vSingleRate;
				Price10.Text = vcalc.ToString();
				saleso.Concessions.Price10 = vcalc;
			} else {
				Price10.Text = "0";
				saleso.Concessions.Price10 = 0;
			}
			
			double vcalc50 = (double)vTotalRooms/50;
			if (vcalc50 < 0.75){
				vcalc50 = 0;	
			} else if ((vcalc50 >= 0.75)&(vcalc50<=1)){
				vcalc50 = 1;
			}else	{
				vcalc50 = Math.Ceiling(Math.Round(vcalc50+0.50));
			}			
			Multi10.Text = vcalc50.ToString();
			saleso.Concessions.Multi10 = vcalc50;
			break;						
	}
}

//TOtals

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>True</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>Concessions</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>true</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms"><QFTextBox xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><ColumnSpan>3</ColumnSpan><RowSpan>3</RowSpan><Column>0</Column><Row>11</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>memComments</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Comments</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>top</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><Lines>3</Lines><OnChangeAction><ResourceKey>memComments</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction></QFTextBox></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>0</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFLabel2</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>center</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>true</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty1</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>1</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty1</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty1</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty1</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty2</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>2</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty2</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty2</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty2</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty3</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>3</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty3</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty3</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty3</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty4</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>4</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty4</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty4</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty4</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty5</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>5</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty5</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty5</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty5</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty6</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>6</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty6</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty6</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty6</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty7</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>7</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty7</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty7</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty7</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty8</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>8</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty8</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty8</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty8</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty9</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>9</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty9</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty9</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty9</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Qty10</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>1</Column><Row>10</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Qty10</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Qty10</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Qty10</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><ColumnSpan>4</ColumnSpan><Column>1</Column><Row>21</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFSparkLine</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>false</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>0</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFLabel3</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>center</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>true</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi1</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>1</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi1</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi1</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi1</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi2</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>2</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi2</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi2</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi2</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi3</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>3</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi3</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi3</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi3</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi4</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>4</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi4</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi4</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi4</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());


//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String"></Property>
        <Property name="EntityNamespace" type="System.String"></Property>
        <Property name="EntityAssemblyName" type="System.String"></Property>
        <Property name="DefaultNamespace" type="System.String"></Property>
        <Property name="AssemblyName" type="System.String"></Property>
        <Property name="EntityReferenceName" type="System.String"></Property>
        <Property name="DesignerDisplayMember" type="System.String"></Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>5</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi5</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi5</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi5</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi6</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>6</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi6</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi6</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi6</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi7</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>7</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi7</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi7</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi7</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());


//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi8</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>8</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi8</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi8</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi8</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());


//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi9</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>9</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi9</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi9</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi9</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Multi10</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>10</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Multi10</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Multi10</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Multi10</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>16</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curQRateSgl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.OrigQuotedRate</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curQRateSgl</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

// Total Quoted SGL
if (string.IsNullOrEmpty(curQRateSgl.Text) | string.IsNullOrEmpty(txtTotQRSgl.Text)){
		txtTotQSgl.Text = "0";
}
else {
	
	decimal vTotQSgl =  decimal.Parse(txtTotQRSgl.Text) * decimal.Parse(curQRateSgl.Text);
	txtTotQSgl.Text = vTotQSgl.ToString();	
}


// Total Quoted DBL
if (string.IsNullOrEmpty(curQRateDbl.Text) | string.IsNullOrEmpty(txtTotQRDbl.Text)){
		txtTotQDbl.Text = "0";
}
else {
	decimal vTotQDbl = decimal.Parse(curQRateDbl.Text) * decimal.Parse(txtTotQRDbl.Text);
	txtTotQDbl.Text = vTotQDbl.ToString();	
}

// Total Contracted SGL
if (string.IsNullOrEmpty(curCRateSgl.Text) | string.IsNullOrEmpty(txtTotCRSgl.Text)){
		txtTotCSgl.Text = "0";
}
else {
	
	decimal vTotCSgl = decimal.Parse(curCRateSgl.Text) * decimal.Parse(txtTotCRSgl.Text);
	txtTotCSgl.Text = vTotCSgl.ToString();	
}

// Total Contracted DBL
if (string.IsNullOrEmpty(curCRateDbl.Text) | string.IsNullOrEmpty(txtTotCRDbl.Text)){
		txtTotCDbl.Text = "0";
}
else {

	decimal vTotCDbl = decimal.Parse(curCRateDbl.Text) * decimal.Parse(txtTotCRDbl.Text);
	txtTotCDbl.Text = vTotCDbl.ToString();	
}

//Rate Savings
	decimal vRateSavings= (decimal.Parse(txtTotQSgl.Text) +  decimal.Parse(txtTotQDbl.Text)) -  (decimal.Parse(txtTotCSgl.Text) +  decimal.Parse(txtTotCDbl.Text));
	txtRateSavings.Text = vRateSavings.ToString();
	saleso.Concessions.RateSavings = double.Parse(vRateSavings.ToString());
saleso.Concessions.RSaving2 = double.Parse(vRateSavings.ToString());
	this.txtRateSavings2.Text = vRateSavings.ToString();

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value

	
	txtTotSavValue.Text = vGrandTotal.ToString();



//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>17</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curQRateDbl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.QRateDBL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curQRateDbl</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

// Total Quoted SGL
if (string.IsNullOrEmpty(curQRateSgl.Text) | string.IsNullOrEmpty(txtTotQRSgl.Text)){
		txtTotQSgl.Text = "0";
}
else {
	
	decimal vTotQSgl =  decimal.Parse(txtTotQRSgl.Text) * decimal.Parse(curQRateSgl.Text);
	txtTotQSgl.Text = vTotQSgl.ToString();	
}


// Total Quoted DBL
if (string.IsNullOrEmpty(curQRateDbl.Text) | string.IsNullOrEmpty(txtTotQRDbl.Text)){
		txtTotQDbl.Text = "0";
}
else {
	decimal vTotQDbl = decimal.Parse(curQRateDbl.Text) * decimal.Parse(txtTotQRDbl.Text);
	txtTotQDbl.Text = vTotQDbl.ToString();	
}

// Total Contracted SGL
if (string.IsNullOrEmpty(curCRateSgl.Text) | string.IsNullOrEmpty(txtTotCRSgl.Text)){
		txtTotCSgl.Text = "0";
}
else {
	
	decimal vTotCSgl = decimal.Parse(curCRateSgl.Text) * decimal.Parse(txtTotCRSgl.Text);
	txtTotCSgl.Text = vTotCSgl.ToString();	
}

// Total Contracted DBL
if (string.IsNullOrEmpty(curCRateDbl.Text) | string.IsNullOrEmpty(txtTotCRDbl.Text)){
		txtTotCDbl.Text = "0";
}
else {

	decimal vTotCDbl = decimal.Parse(curCRateDbl.Text) * decimal.Parse(txtTotCRDbl.Text);
	txtTotCDbl.Text = vTotCDbl.ToString();	
}

//Rate Savings
	decimal vRateSavings= (decimal.Parse(txtTotQSgl.Text) +  decimal.Parse(txtTotQDbl.Text)) -  (decimal.Parse(txtTotCSgl.Text) +  decimal.Parse(txtTotCDbl.Text));
	txtRateSavings.Text = vRateSavings.ToString();
	saleso.Concessions.RateSavings = double.Parse(vRateSavings.ToString());
saleso.Concessions.RSaving2 = double.Parse(vRateSavings.ToString());
	this.txtRateSavings2.Text = vRateSavings.ToString();

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value

	
	txtTotSavValue.Text = vGrandTotal.ToString();



//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>18</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curCRateSgl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.CRateSGL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curCRateSgl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>19</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curCRateDbl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.CRateDbl</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curCRateDbl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>22</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotOrderValue</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotOrderValue</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>23</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotSavValue</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotSavValue</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>24</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotSavPerc</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotSavPerc</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Percent</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>27</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>pklAttrition</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.AttritYN</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>pklAttrition</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[
	if (pklAttrition.PickListValue == "F"){
		txtAttPercent.Enabled = true;
		txtCostAvoidance.Enabled = true;
		txtCostAvoidance.Text = "0";
	} else
	{
		txtAttPercent.Enabled = false;
		txtCostAvoidance.Enabled = false;
	}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>TrueFalse</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>false</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>28</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtAttPercent</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.AttritPct</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtAttPercent</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[
if (int.Parse(txtAttPercent.Text) >9){
	throw new Sage.Platform.Application.ValidationException("The value can not be greater than or equal to 10.");
} else {
	int vCost = 100 - int.Parse(txtAttPercent.Text);
	txtCostAvoidance.Text = vCost.ToString();
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>29</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtRoomsSaved</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtRoomsSaved</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>30</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtAttSavings</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtAttSavings</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>2</Column><Row>31</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>pklCancClause</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Cancellation</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>pklCancClause</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>TrueFalse</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>false</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>0</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFLabel4</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>center</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>true</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price1</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>1</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price1</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price1</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price1</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price2</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>2</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price2</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price2</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price2</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price3</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>3</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price3</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price3</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price3</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price4</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>4</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price4</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price4</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price4</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price5</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>5</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price5</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price5</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price5</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price6</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>6</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price6</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price6</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price6</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price7</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>7</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price7</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price7</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price7</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price8</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>8</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price8</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price8</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price8</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price9</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>9</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price9</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price9</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price9</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">Property</Property>
        <Property name="EntityTypeName" type="System.String">IConcessions</Property>
        <Property name="EntityNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityAssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="DefaultNamespace" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="AssemblyName" type="System.String">Sage.Entity.Interfaces</Property>
        <Property name="EntityReferenceName" type="System.String">Concessions</Property>
        <Property name="ValueMember" type="System.String">Price10</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>10</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>Price10</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Price10</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>Price10</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Total 1-10
decimal vTotal1 = 0;	
if (!string.IsNullOrEmpty(Qty1.Text) & !string.IsNullOrEmpty(Multi1.Text) & !string.IsNullOrEmpty(Price1.Text)){
   vTotal1 = int.Parse(Qty1.Text) * decimal.Parse(Multi1.Text) * decimal.Parse(Price1.Text);
}
total1.Text = vTotal1.ToString();

decimal vTotal2 = 0;	
if (!string.IsNullOrEmpty(Qty2.Text) & !string.IsNullOrEmpty(Multi2.Text) & !string.IsNullOrEmpty(Price2.Text)){
   vTotal2 = int.Parse(Qty2.Text) * decimal.Parse(Multi2.Text) * decimal.Parse(Price2.Text);
}
total2.Text = vTotal2.ToString();

decimal vTotal3 = 0;	
if (!string.IsNullOrEmpty(Qty3.Text) & !string.IsNullOrEmpty(Multi3.Text) & !string.IsNullOrEmpty(Price3.Text)){
vTotal3 = int.Parse(Qty3.Text) * decimal.Parse(Multi3.Text) * decimal.Parse(Price3.Text);
}
total3.Text = vTotal3.ToString();

decimal vTotal4 = 0;	
if (!string.IsNullOrEmpty(Qty4.Text) & !string.IsNullOrEmpty(Multi4.Text) & !string.IsNullOrEmpty(Price4.Text)){
   vTotal4 = int.Parse(Qty4.Text) * decimal.Parse(Multi4.Text) * decimal.Parse(Price4.Text);
}
total4.Text = vTotal4.ToString();

decimal vTotal5 = 0;	
if (!string.IsNullOrEmpty(Qty5.Text) & !string.IsNullOrEmpty(Multi5.Text) & !string.IsNullOrEmpty(Price5.Text)){
   vTotal5 = int.Parse(Qty5.Text) * decimal.Parse(Multi5.Text) * decimal.Parse(Price5.Text);
}
total5.Text = vTotal5.ToString();

decimal vTotal6 = 0;	
if (!string.IsNullOrEmpty(Qty6.Text) & !string.IsNullOrEmpty(Multi6.Text) & !string.IsNullOrEmpty(Price6.Text)){
   vTotal6 = int.Parse(Qty6.Text) * decimal.Parse(Multi6.Text) * decimal.Parse(Price6.Text);
}
total6.Text = vTotal6.ToString();

decimal vTotal7 = 0;	
if (!string.IsNullOrEmpty(Qty7.Text) & !string.IsNullOrEmpty(Multi7.Text) & !string.IsNullOrEmpty(Price7.Text)){
   vTotal7 = int.Parse(Qty7.Text) * decimal.Parse(Multi7.Text) * decimal.Parse(Price7.Text);
}
total7.Text = vTotal7.ToString();

decimal vTotal8 = 0;	
if (!string.IsNullOrEmpty(Qty8.Text) & !string.IsNullOrEmpty(Multi8.Text) & !string.IsNullOrEmpty(Price8.Text)){
   vTotal8 = int.Parse(Qty8.Text) * decimal.Parse(Multi8.Text) * decimal.Parse(Price8.Text);
}
total8.Text = vTotal8.ToString();

decimal vTotal9 = 0;	
if (!string.IsNullOrEmpty(Qty9.Text) & !string.IsNullOrEmpty(Multi9.Text) & !string.IsNullOrEmpty(Price9.Text)){
   vTotal9 = int.Parse(Qty9.Text) * decimal.Parse(Multi9.Text) * decimal.Parse(Price9.Text);
}
total9.Text = vTotal9.ToString();

decimal vTotal10 = 0;	
if (!string.IsNullOrEmpty(Qty10.Text) & !string.IsNullOrEmpty(Multi10.Text) & !string.IsNullOrEmpty(Price10.Text)){
   vTotal10 = int.Parse(Qty10.Text) * decimal.Parse(Multi10.Text) * decimal.Parse(Price10.Text);
}
total10.Text = vTotal10.ToString();

//Sub Total
decimal vSubTotal = vTotal1+vTotal2+vTotal3+vTotal4+vTotal5+vTotal6+vTotal7+vTotal8+vTotal9+vTotal10;
curSubTotal.Text = vSubTotal.ToString();
saleso.Concessions.Subtot1 = double.Parse(vSubTotal.ToString());

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}
]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>16</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotQRSgl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RoomsSGL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotQRSgl</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

// Total Quoted SGL
if (string.IsNullOrEmpty(curQRateSgl.Text) | string.IsNullOrEmpty(txtTotQRSgl.Text)){
		txtTotQSgl.Text = "0";
}
else {
	
	decimal vTotQSgl =  decimal.Parse(txtTotQRSgl.Text) * decimal.Parse(curQRateSgl.Text);
	txtTotQSgl.Text = vTotQSgl.ToString();	
}


// Total Quoted DBL
if (string.IsNullOrEmpty(curQRateDbl.Text) | string.IsNullOrEmpty(txtTotQRDbl.Text)){
		txtTotQDbl.Text = "0";
}
else {
	decimal vTotQDbl = decimal.Parse(curQRateDbl.Text) * decimal.Parse(txtTotQRDbl.Text);
	txtTotQDbl.Text = vTotQDbl.ToString();	
}

// Total Contracted SGL
if (string.IsNullOrEmpty(curCRateSgl.Text) | string.IsNullOrEmpty(txtTotCRSgl.Text)){
		txtTotCSgl.Text = "0";
}
else {
	
	decimal vTotCSgl = decimal.Parse(curCRateSgl.Text) * decimal.Parse(txtTotCRSgl.Text);
	txtTotCSgl.Text = vTotCSgl.ToString();	
}

// Total Contracted DBL
if (string.IsNullOrEmpty(curCRateDbl.Text) | string.IsNullOrEmpty(txtTotCRDbl.Text)){
		txtTotCDbl.Text = "0";
}
else {

	decimal vTotCDbl = decimal.Parse(curCRateDbl.Text) * decimal.Parse(txtTotCRDbl.Text);
	txtTotCDbl.Text = vTotCDbl.ToString();	
}

//Rate Savings
	decimal vRateSavings= (decimal.Parse(txtTotQSgl.Text) +  decimal.Parse(txtTotQDbl.Text)) -  (decimal.Parse(txtTotCSgl.Text) +  decimal.Parse(txtTotCDbl.Text));
	txtRateSavings.Text = vRateSavings.ToString();
	saleso.Concessions.RateSavings = double.Parse(vRateSavings.ToString());
saleso.Concessions.RSaving2 = double.Parse(vRateSavings.ToString());
	this.txtRateSavings2.Text = vRateSavings.ToString();

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value

	
	txtTotSavValue.Text = vGrandTotal.ToString();



//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>17</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotQRDbl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RoomsDBL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotQRDbl</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

// Total Quoted SGL
if (string.IsNullOrEmpty(curQRateSgl.Text) | string.IsNullOrEmpty(txtTotQRSgl.Text)){
		txtTotQSgl.Text = "0";
}
else {
	
	decimal vTotQSgl =  decimal.Parse(txtTotQRSgl.Text) * decimal.Parse(curQRateSgl.Text);
	txtTotQSgl.Text = vTotQSgl.ToString();	
}


// Total Quoted DBL
if (string.IsNullOrEmpty(curQRateDbl.Text) | string.IsNullOrEmpty(txtTotQRDbl.Text)){
		txtTotQDbl.Text = "0";
}
else {
	decimal vTotQDbl = decimal.Parse(curQRateDbl.Text) * decimal.Parse(txtTotQRDbl.Text);
	txtTotQDbl.Text = vTotQDbl.ToString();	
}

// Total Contracted SGL
if (string.IsNullOrEmpty(curCRateSgl.Text) | string.IsNullOrEmpty(txtTotCRSgl.Text)){
		txtTotCSgl.Text = "0";
}
else {
	
	decimal vTotCSgl = decimal.Parse(curCRateSgl.Text) * decimal.Parse(txtTotCRSgl.Text);
	txtTotCSgl.Text = vTotCSgl.ToString();	
}

// Total Contracted DBL
if (string.IsNullOrEmpty(curCRateDbl.Text) | string.IsNullOrEmpty(txtTotCRDbl.Text)){
		txtTotCDbl.Text = "0";
}
else {

	decimal vTotCDbl = decimal.Parse(curCRateDbl.Text) * decimal.Parse(txtTotCRDbl.Text);
	txtTotCDbl.Text = vTotCDbl.ToString();	
}

//Rate Savings
	decimal vRateSavings= (decimal.Parse(txtTotQSgl.Text) +  decimal.Parse(txtTotQDbl.Text)) -  (decimal.Parse(txtTotCSgl.Text) +  decimal.Parse(txtTotCDbl.Text));
	txtRateSavings.Text = vRateSavings.ToString();
	saleso.Concessions.RateSavings = double.Parse(vRateSavings.ToString());
saleso.Concessions.RSaving2 = double.Parse(vRateSavings.ToString());
	this.txtRateSavings2.Text = vRateSavings.ToString();

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value

	
	txtTotSavValue.Text = vGrandTotal.ToString();



//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>18</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotCRSgl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RoomsSGL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotCRSgl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>3</Column><Row>19</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotCRDbl</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RoomsDBL</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotCRDbl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.Platform.QuickForms.QFControls.QFHorizontalSeparator, Sage.Platform.QuickForms.QFControls"><QFHorizontalSeparator xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>0</Row><IsReadOnly>false</IsReadOnly><HotKey>48</HotKey><TabIndex>0</TabIndex><ControlId>QFLabel5</ControlId><DataBindings /><ControlLabelPlacement>none</ControlLabelPlacement><CaptionAlignment>center</CaptionAlignment><StyleScheme /><DisplayAsTitleBar>true</DisplayAsTitleBar></QFHorizontalSeparator></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>1</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total1</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total1</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><CurrentCode /><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>2</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total2</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total2</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>3</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total3</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total3</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>4</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total4</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total4</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>5</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total5</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total5</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>6</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total6</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total6</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>7</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total7</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total7</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>8</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total8</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total8</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>9</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total9</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total9</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>10</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>total10</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>total10</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>11</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curSubTotal</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Subtot1</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curSubTotal</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>13</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curAdtSavings</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Additional</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curAdtSavings</ResourceKey><RootActionName>CSharpSnippetAction</RootActionName><Action><CSharpCodeSnippet><![CDATA[Sage.Entity.Interfaces.ISalesOrder saleso = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;

//Additional Savings
decimal vAddSavings = 0;
if (string.IsNullOrEmpty(curAdtSavings.Text)){
	curAdtSavings.Text = vAddSavings.ToString();
}


//Total Concessions
decimal vTotConcessions = decimal.Parse(curSubTotal.Text) + decimal.Parse(curAdtSavings.Text);
curTotConcessions.Text = vTotConcessions.ToString();
saleso.Concessions.Subtot2 = double.Parse(vTotConcessions.ToString());
saleso.Concessions.CSaving2 = double.Parse(vTotConcessions.ToString());

//Total Savings
	decimal vTotSavings = decimal.Parse(txtRateSavings.Text) + decimal.Parse(curTotConcessions.Text);
	saleso.Concessions.Subtotal3 =  double.Parse(vTotSavings.ToString());
	txtTotSavings.Text = vTotSavings.ToString();


//12% Tax
	decimal v12Tax = decimal.Parse(txtTotSavings.Text) * decimal.Parse("0.12");
	txt12Tax.Text = v12Tax.ToString();

//Grand Total
	decimal vGrandTotal = decimal.Parse(txtTotSavings.Text) + decimal.Parse(txt12Tax.Text);
	txtGrandTotal.Text = vGrandTotal.ToString();
	saleso.Concessions.Total = vGrandTotal;
	saleso.Concessions.CTotal2 = double.Parse(vGrandTotal.ToString());

//Total Savings Value
	txtTotSavValue.Text = vGrandTotal.ToString();


//Total Savings %

if (decimal.Parse(txtTotOrderValue.Text) > 0){
	decimal vTotSavPerc = (decimal.Parse(txtTotSavValue.Text)/decimal.Parse(txtTotOrderValue.Text));
	txtTotSavPerc.Text = vTotSavPerc.ToString();
}else {
	txtTotSavPerc.Text = "0";
}]]></CSharpCodeSnippet></Action><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>14</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>curTotConcessions</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Subtot2</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>curTotConcessions</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>16</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotQSgl</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotQSgl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>17</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotQDbl</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotQDbl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>18</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotCSgl</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotCSgl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>19</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotCDbl</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotCDbl</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>20</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtRateSavings</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RateSavings</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtRateSavings</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>22</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtConSavings</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Subtot2</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtConSavings</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>23</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtRateSavings2</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.RateSavings</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtRateSavings2</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>24</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtTotSavings</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Subtotal3</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtTotSavings</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>25</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txt12Tax</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txt12Tax</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>26</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtGrandTotal</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.Total</DataItemName><ControlItemName>Text</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtGrandTotal</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls"><QFSLXNumeric xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>28</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtCostAvoidance</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtCostAvoidance</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><FormatType>Number</FormatType></QFSLXNumeric></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls"><QFSLXCurrency xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>29</Row><IsReadOnly>true</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>txtAvgRate</ControlId><DataBindings /><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>txtAvgRate</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><ExchangeRateType>BaseRate</ExchangeRateType></QFSLXCurrency></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
    <QuickFormElement>
      <Properties>
        <Property name="EntityMappingType" type="System.String">None</Property>
      </Properties>
      <ControlDefinition>
        <Properties>
          <Property name="Control" type="Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls"><QFSLXPickList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Column>4</Column><Row>31</Row><IsReadOnly>false</IsReadOnly><HotKey>0</HotKey><TabIndex>0</TabIndex><ControlId>pklFoodBev</ControlId><DataBindings><QuickFormPropertyDataBindingDefinition><DataSourceID>MainEntity</DataSourceID><DataItemName>Concessions.FBYN</DataItemName><ControlItemName>PickListValue</ControlItemName><FormatString /><NullValueString /></QuickFormPropertyDataBindingDefinition></DataBindings><ControlLabelPlacement>left</ControlLabelPlacement><CaptionAlignment>left</CaptionAlignment><StyleScheme /><OnChangeAction><ResourceKey>pklFoodBev</ResourceKey><RootActionName>NoActionAction</RootActionName><Action /><IsDialogCloseAction>False</IsDialogCloseAction><RunOnEveryRePaint>False</RunOnEveryRePaint><DialogActionResult>NoResult</DialogActionResult><PerformsUpdate>False</PerformsUpdate><AppliedSecurity /></OnChangeAction><Required>false</Required><AutoPostBack>false</AutoPostBack><PickListName>TrueFalse</PickListName><StorageMode>Text</StorageMode><NameFormatString /><AllowMultiples>false</AllowMultiples><AlphaSort>false</AlphaSort><MustExistInList>false</MustExistInList><NoneEditable>false</NoneEditable><PickListId /><ValueStoredAsText>true</ValueStoredAsText></QFSLXPickList></Property>
        </Properties>
      </ControlDefinition>
    </QuickFormElement>
  </QuickFormElements>
  <QuickFormToolElements />
</QuickFormDefinition>